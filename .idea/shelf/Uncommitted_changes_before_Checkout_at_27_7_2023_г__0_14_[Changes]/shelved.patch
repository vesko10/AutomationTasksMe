Index: src/test/java/lecture14/ExerciseTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package lecture14;\r\n\r\nimport io.github.bonigarcia.wdm.WebDriverManager;\r\nimport jdk.jshell.execution.Util;\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\nimport org.openqa.selenium.support.ui.ExpectedConditions;\r\nimport org.openqa.selenium.support.ui.WebDriverWait;\r\nimport org.testng.Assert;\r\nimport org.testng.annotations.*;\r\n\r\nimport java.time.Duration;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\nimport java.util.UUID;\r\n\r\npublic class ExerciseTests {\r\n    private WebDriver driver;\r\n\r\n    /**\r\n     * Setup all browser drivers before the test suite execution\r\n     * This setup will be executed only once for the whole test run\r\n     */\r\n    @BeforeSuite\r\n    protected final void setupTestSuite() {\r\n        WebDriverManager.chromedriver().setup();\r\n        WebDriverManager.firefoxdriver().setup();\r\n        WebDriverManager.edgedriver().setup();\r\n    }\r\n\r\n    /**\r\n     * Opens a new window in the browser before the execution of each test method\r\n     * Example: If you have 2 methods: method1 & method2. The execution will be:\r\n     * 1. setUpTest + method1\r\n     * 2. setUpTest + method2\r\n     */\r\n    @BeforeMethod\r\n    protected final void setUpTest() {\r\n        this.driver = new ChromeDriver();\r\n        this.driver.manage().window().maximize();\r\n\r\n        //Sets timeout to wait for a page to load completely. Works only with get() and navigate().to()\r\n        driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20));\r\n\r\n        /*\r\n        Sets timeout to wait for any element to appear in the DOM tree\r\n        Example:\r\n        If you execute findElement() the driver will be checking for the element to appear in the DOM tree for the duration of 5 seconds\r\n        If element the element is found within the 5 seconds the test execution continues\r\n        Otherwise if the element is not found NoSuchElementException will be thrown\r\n        Important:\r\n        If the element is presented in the DOM tree this doesn't guarantee that the element is visible on the page!\r\n        The implicit wait applies for all elements during the driver's lifecycle\r\n         */\r\n        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));\r\n    }\r\n\r\n    /**\r\n     * After each test closes the current browser window\r\n     * Example: If you have 2 methods: method1 & method2. The execution will be:\r\n     * 1. setUpTest + method1 + tearDownTest\r\n     * 2. setUpTest + method2 + tearDownTest\r\n     */\r\n    @AfterMethod\r\n    protected final void tearDownTest() {\r\n        if (this.driver != null) {\r\n            this.driver.close();\r\n        }\r\n    }\r\n\r\n    @DataProvider(name = \"getUsers\")\r\n    public Object[][] getUsers() {\r\n        return new Object[][]{{\"DimitarTarkalanov\", \"Dimitar1.Tarkalanov1\", \"DimitarTarkalanov\"}, //login with username\r\n                {\"testMail1@gmail.com\", \"Dimitar1.Tarkalanov1\", \"DimitarTarkalanov\"}, //login with email\r\n                {\"testAdmin@gmail.com\", \"Admin1.User1\", \"AdminUser\"}, //login with admin user\r\n                {\"manager@gmail.com\", \"Manager1.Use1\", \"ManagerUser\"} //login with manager user\r\n        };\r\n    }\r\n\r\n    // demo invocationCount = 10\r\n    @Test(dataProvider = \"getUsers\")\r\n    public void testLoginWithWaits(String user, String password, String name) {\r\n        driver.get(\"http://training.skillo-bg.com:4300/posts/all\");\r\n        WebElement loginLink = driver.findElement(By.id(\"nav-link-login\"));\r\n        loginLink.click();\r\n\r\n        /*\r\n        Replaces\r\n        String expectedLoginPageUrl = \"http://training.skillo-bg.com:4300/users/login\";\r\n        String actualLoginPageUrl = driver.getCurrentUrl();\r\n        Assert.assertEquals(actualLoginPageUrl, expectedLoginPageUrl, \"Login page URL is incorrect!\");\r\n        */\r\n        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\r\n        wait.until(ExpectedConditions.urlToBe(\"http://training.skillo-bg.com:4300/users/login\"));\r\n\r\n        /*\r\n        Replaces\r\n        Assert.assertTrue(signinelement.isdisplayed(), \"the 'sign in' text is not displayed!\");\r\n         */\r\n        WebElement signInElement = driver.findElement(By.xpath(\"//*[text()='Sign in']\"));\r\n        wait.until(ExpectedConditions.visibilityOf(signInElement));\r\n\r\n        WebElement userNameField = driver.findElement(By.id(\"defaultLoginFormUsername\"));\r\n        userNameField.sendKeys(user);\r\n\r\n        WebElement passwordField = driver.findElement(By.id(\"defaultLoginFormPassword\"));\r\n        passwordField.sendKeys(password);\r\n\r\n        /*\r\n        Replaces\r\n        WebElement signInButton = driver.findElement(By.id(\"sign-in-button\"));\r\n        Assert.assertTrue(signInButton.isEnabled(), \"The Sign In button is disabled!\");\r\n        signInButton.click();\r\n        */\r\n        WebElement signInButton = wait.until(ExpectedConditions.elementToBeClickable(By.id(\"sign-in-button\")));\r\n        signInButton.click();\r\n\r\n        /*\r\n        Replaces\r\n        WebElement profileLink = driver.findElement(By.id(\"nav-link-profile\"));\r\n        Assert.assertTrue(profileLink.isDisplayed(), \"The profile link is not displayed!\");\r\n        */\r\n        WebElement profileLink = wait.until(ExpectedConditions.elementToBeClickable(By.id(\"nav-link-profile\")));\r\n        profileLink.click();\r\n\r\n        /*\r\n        Replaces\r\n        String actualProfilePageUrl = driver.getCurrentUrl();\r\n        String expectedProfilePage = \"http://training.skillo-bg.com:4300/users/3905\";\r\n        Assert.assertEquals(actualProfilePageUrl, expectedProfilePage, \"The profile page url is incorrect!\");\r\n         */\r\n        wait.until(ExpectedConditions.urlContains(\"http://training.skillo-bg.com:4300/users/\"));\r\n\r\n        /*\r\n        Replaces\r\n        WebElement userNameElement = driver.findElement(By.tagName(\"h2\"));\r\n        String actualUserName = userNameElement.getText();\r\n        String expectedUserName = \"DimitarTarkalanov\";\r\n        Assert.assertEquals(actualUserName, expectedUserName, \"The user name is incorrect!\");\r\n         */\r\n        Boolean isTextDisplayed = wait.until(ExpectedConditions.textToBe(By.tagName(\"h2\"), name));\r\n        Assert.assertTrue(isTextDisplayed, \"The username is not displayed!\");\r\n    }\r\n\r\n    @Test\r\n    public void testRegistration(){\r\n        driver.get(\"http://training.skillo-bg.com:4300/posts/all\");\r\n        WebElement loginLink = driver.findElement(By.id(\"nav-link-login\"));\r\n        loginLink.click();\r\n\r\n        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\r\n        wait.until(ExpectedConditions.urlToBe(\"http://training.skillo-bg.com:4300/users/login\"));\r\n\r\n        WebElement signInElement = driver.findElement(By.xpath(\"//*[text()='Sign in']\"));\r\n        wait.until(ExpectedConditions.visibilityOf(signInElement));\r\n\r\n        WebElement registerLink = driver.findElement(By.linkText(\"Register\"));\r\n        registerLink.click();\r\n\r\n        wait.until(ExpectedConditions.urlToBe(\"http://training.skillo-bg.com:4300/users/register\"));\r\n\r\n        WebElement signUpLabel = driver.findElement(By.xpath(\"//*[text()='Sign up']\"));\r\n        wait.until(ExpectedConditions.visibilityOf(signUpLabel));\r\n\r\n        WebElement usernameElement = driver.findElement(By.name(\"username\"));\r\n        usernameElement.sendKeys(\"testttttTesttt\");\r\n\r\n//        String email = generateEmail();\r\n        WebElement emailElement = driver.findElement(By.cssSelector(\"input[type='email']\"));\r\n        emailElement.sendKeys(\"testtj1211@gmail.com\");\r\n        //emailElement.sendKeys(email);\r\n\r\n        WebElement dateElement = driver.findElement(By.xpath(\"//input[@formcontrolname='birthDate']\"));\r\n        dateElement.sendKeys(\"10022000\");\r\n\r\n        WebElement passwordField = driver.findElement(By.xpath(\"//input[@id='defaultRegisterFormPassword']\"));\r\n        passwordField.sendKeys(\"Aa123456\");\r\n\r\n        WebElement passwordConfirmationField = driver.findElement(By.xpath(\"//input[@id='defaultRegisterPhonePassword']\"));\r\n        passwordConfirmationField.sendKeys(\"Aa123456\");\r\n\r\n        WebElement publicInfoField = driver.findElement(By.xpath(\"//textarea[@placeholder='Public info']\"));\r\n        publicInfoField.sendKeys(\"Test\");\r\n\r\n        WebElement signInButton = driver.findElement(By.xpath(\"//button[@id='sign-in-button']\"));\r\n        signInButton.click();\r\n\r\n        WebElement profileLink = wait.until(ExpectedConditions.elementToBeClickable(By.id(\"nav-link-profile\")));\r\n        profileLink.click();\r\n\r\n        wait.until(ExpectedConditions.urlContains(\"http://training.skillo-bg.com:4300/users/\"));\r\n\r\n        WebElement userNameLabelInProfile = driver.findElement(By.tagName(\"h2\"));\r\n        Assert.assertTrue(userNameLabelInProfile.isDisplayed());\r\n\r\n    }\r\n\r\n//    public String randomIdentifier() {\r\n//        Random rand = new Random();\r\n//        Set<String> words = new HashSet<String>();\r\n//        while(((HashSet<?>) words).size() < 10000)\r\n//            words.add(Long.toString(Math.abs(rand.nextLong() % 3656158440062976L), 36));\r\n//        return randomIdentifier();\r\n//        }\r\n\r\n\r\n//    public static String generateRandomName(){\r\n//        String characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n//        String randomString=\"\";\r\n//        int length = 5;\r\n//\r\n//        Random rand = new Random();\r\n//\r\n//        char[] text = new char[length];\r\n//\r\n//        for(int i=0; i< length; i++){\r\n//            text[i]=characters.charAt(rand.nextInt();\r\n//        }\r\n//    }\r\n\r\n\r\n//    public String getSaltString() {\r\n//        String SALTCHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\r\n//        StringBuilder salt = new StringBuilder();\r\n//        Random rnd = new Random();\r\n//        while (salt.length() < 18) { // length of the random string.\r\n//            int index = (int) (rnd.nextFloat() * SALTCHARS.length());\r\n//            salt.append(SALTCHARS.charAt(index));\r\n//        }\r\n//        String saltStr = salt.toString();\r\n//        return saltStr;\r\n//\r\n//    }\r\n\r\n//    public static String generateEmail() {\r\n//        return UUID.randomUUID().toString() + \"@gmail.com\";\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/lecture14/ExerciseTests.java b/src/test/java/lecture14/ExerciseTests.java
--- a/src/test/java/lecture14/ExerciseTests.java	(revision dfc1ff2b24b0581fb853d33ea86f40532537b58d)
+++ b/src/test/java/lecture14/ExerciseTests.java	(date 1690406000684)
@@ -80,7 +80,7 @@
         };
     }
 
-    // demo invocationCount = 10
+//    demo invocationCount = 10
     @Test(dataProvider = "getUsers")
     public void testLoginWithWaits(String user, String password, String name) {
         driver.get("http://training.skillo-bg.com:4300/posts/all");
